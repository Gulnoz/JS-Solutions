//Function to get given row from nested array, returns array
function getRow(puzzle, row){
  return puzzle[row];
}

//Function to get given column from nested array, returns array.
function getColumn(puzzle, col){
  let colArray=[];
  for(let i=0; i<puzzle.length; i++)
  {
    colArray.push(puzzle[i][col]);
  }
  return colArray;
}

//Function to get given section(x,y) from nested array, returns array.
function getSection(puzzle, x, y){
  let sectionArray=[];
  x *= 3;
  y *= 3;
  for (let i = row; i < x+3; i++){
    for (let j = col; j < y+3; j++){
      sectionArray.push(puzzle[i][j])
    }
  }
  return sectionArray;
}

//Function returns true, if array includs numbers from 1 to 9.
function includes1to9(secArray){
  for(let i=1; i<=9; i++){
    if(!secArray.includes(i))
      {
        return false;
      }
   }
  return true;
}

//Function returns true, if all numbers valid in Sudoku puzzle.
function sudokuIsValid (puzzle){
  for (let i = 0; i < puzzle.length; i++){
    if (!includes1to9(getRow(puzzle, i))){
      return false;
    }
    if (!includes1to9(getColumn(puzzle,i))){
      return false;
    }
  }
  for (let x = 0 ; x < 3; x++){
    for (let y = 0; y < 3; y++){
      if (!includes1to9(getSection(puzzle,y,x))){
        return false;
      }
    }
  }
 
    return true;
}

//Function returns true, if two nested arrays are identical.
function isSame(puzzle1, puzzle2){
  if (puzzle1.length != puzzle2.length){
    return false;
  }
  let flag;
  let len = puzzle1.length;
  for (let i = 0; i<len; i++){
    for (let j = 0; j<len; j++){
      if (getRow(puzzle1, i)[j] != getRow(puzzle2, i)[j]){ 
        flag = true;
      }
    }
  }
  if (flag){
    return false;
  }
  else return true;
 }
